# Copyright 2023, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

name: "python_bge_m3_onnx"
backend: "python"
platform: "onnxruntime_onnx"
max_batch_size: 128

input [
  {
    name: "input"
    data_type: TYPE_STRING
    dims: [1]
  }
]
output [
  {
    name: "dense_vecs"
    data_type: TYPE_FP32
    dims: [1024]
  },
  {
    name: "token_ids"
    data_type: TYPE_UINT32
    dims: [-1]
  },
  {
    name: "token_weights"
    data_type: TYPE_FP32
    dims: [-1]
  },
  {
    name: "tokens"
    data_type: TYPE_STRING
    dims: [-1]
  },
  {
    name: "sparse_vecs"
    data_type: TYPE_STRING
    dims: [1]
  },
  {
    name: "token_num"
    data_type: TYPE_UINT32
    dims: [1]
  }
]

# perf_analyzer -m text_recognition -b 16 --shape input.1:1,32,100 --concurrency-range 16
# perf_analyzer -m python_bge_m3_onnx -b 1 --shape input:1 --string-data="https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/model_configuration.html#instance-groups" --concurrency-range 2 

# https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/model_configuration.html#instance-groups
instance_group [
  {
    count: 1
    kind: KIND_GPU
  }
]

# https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/model_configuration.html#response-cache
response_cache {
  enable: false
}

optimization {
  graph : {
    level : 1
  }
 execution_accelerators {
    gpu_execution_accelerator : [ {
      name : "tensorrt",
      parameters { key: "precision_mode" value: "FP16" },
      parameters { key: "max_workspace_size_bytes" value: "1073741824" }
    }]
  }
}
