#include <iostream>
#include <string>
#include <random>
#include <map>

using namespace std;

int main()
{
	random_device rn;
	uniform_int_distribution<int> dist(0, 9);
	
	cout << "Entropy: " << rn.entropy() << '\n';
	cout << "min: " << rn.min() << '\n';
	cout << "max: " << rn.max() << '\n';
	
	map<int, int> hist;
	for(int i=0; i<20000; ++i)
		++hist[dist(rn)];

/*
note: demo only: the performance of many 
implementations of random_device degrades sharply
once the entropy pool is exhausted. For practical use
random_device is generally only used to seed 
a PRNG such as mt19937
*/

	for(auto& p: hist)
	{
		cout << p.first << ": " << string(p.second/100, '*') << '\n';
	}
}

/*
Q: how to make std::random_device reproducible?
In C++, `std::random_device` is designed to provide random numbers from a non-deterministic source, if available. This can make it difficult to guarantee reproducibility. However, if reproducibility is a requirement, you would typically use `std::random_device` only to seed a pseudo-random number generator (PRNG), such as `std::mt19937`, and control the randomness by managing the PRNG's seed.

To make your random number generation reproducible, you can set a fixed seed for your PRNG. Here's an example demonstrating how to do this:

```cpp
#include <iostream>
#include <random>
#include <chrono>

int main() {
    // Optionally, using std::random_device to seed the generator
    // Uncomment the following two lines if you prefer to use random_device once
    // std::random_device rd;
    // std::mt19937 gen(rd());
    
    // For reproducibility, use a fixed seed
    // You can use a specific integer or derive it from system time for pseudo-randomization
    unsigned seed = 12345; // fixed seed for reproducibility
    // unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 gen(seed);

    // Define a distribution (e.g., uniform distribution between 0 and 99)
    std::uniform_int_distribution<> dis(0, 99);

    // Generate and print random numbers
    for (int n = 0; n < 10; ++n) {
        std::cout << dis(gen) << ' ';
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation

1. **Seed the Generator**:
   - By using a fixed seed (e.g., `unsigned seed = 12345;`), you ensure that the sequence of random numbers generated by `std::mt19937` is reproducible. If you prefer to use `std::random_device` to generate a seed for the PRNG, ensure it is only used once, or that its generated value is stored.
   
2. **Alternative Seeding**:
   - If complete reproducibility is not strictly necessary, but you still want some variation, you can derive the seed from the system clock (`std::chrono::system_clock::now().time_since_epoch().count()`).

3. **Using a Distribution**:
   - The `std::uniform_int_distribution<>` distribution is used to produce integer values uniformly distributed across a specified range. You can also use other distributions, such as `std::normal_distribution<>`, `std::bernoulli_distribution`, etc., depending on your application requirements.

4. **Generate and Print**:
   - Generate and print random numbers within the desired range using the initialized PRNG (`gen`) and distribution (`dis`).

By fixing the seed, you ensure that the sequence of random numbers remains consistent across multiple runs, which is crucial for testing and debugging purposes.
*/

